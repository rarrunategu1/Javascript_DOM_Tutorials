What is the DOM?

The DOM (Document Object Model) is created by the browser whenever
a web page loads.  It looks like a tree of elements to include 
parent and child elments.

This model allows us to interact with web pages in javascript 
to make changes to it.

We can make read and make changes to HTML elements, Css styles, 
href, src, alt and custom attributes.

We can even create new html elements and insert into the DOM.

Also we can attach event listeners to elements such as
click, keypress, submit and react to those with javascript.

GET ELEMENT BY ID

First step to get an element ID is to reach into the webpage
by typing "document" in the console when inspecting a webpage 
(without the quotes of course) and it will display the document 
code, line by line. 

To get it an element by id you would do the following
in the console next:
document.getElementById('page-banner') //page-banner is an id on this page.

I can store that element in a variable like so:
var banner = document.getElementById('page-banner')

GET ELEMENT BY CLASS NAME AND TAG

This one is almost the same as the id one.  

document.getElementsByClassName('title')

Give it a variable

var titles = document.getElementsByClassName('title')

*Since title is a class there will be multiple.  You can access each one like so:

titles[0]

BY TAG NAME

var lis = document.getElementsByTagName('li')
undefined
lis
HTMLCollection(4) [li, li, li, li]0: li1: li2: li3: lilength: 4__proto__: HTMLCollection

You can also access the individual elements as you do with class:

lis[0]


What if I want to query the DOM for all the 
title class elements and style them in a particular way:

for (i =0; i<titles.length; i++) {
    console.log(titles[i])
}
Will give you every title below:
VM194:2 <h1 data-cloud9-id=​"11" class=​"title">​Bookorama​</h1>​
VM194:2 <h2 data-cloud9-id=​"16" class=​"title">​Books to Read​</h2>​

     or you can cycle through it through a js file
     linked to your html
     
If you try this it won't work because titles isn't an array
forEach is only for arrays

var titles = document.getElementsByClassName('title');

titles.forEach(function(item){
    console.log(item);
})

Let's check if it's an array:
var titles = document.getElementsByClassName('title');

console.log(Array.isArray(titles));
*This will return false because it's not an array

So let's turn it into an array:

var titles = document.getElementsByClassName('titles');

console.log(Array.isArray(titles));
console.log(Array.isArray(Array.from(titles)));  //this line turns it into array, now returning true

So now I can change the initial code to read:

var titles = document.getElementsByClassName('title');

Array.from(titles).forEach(function(item){
console.log(item);
})

Now it will console.log every title


JAVASCRIPT QUERY SELECTOR

In jquery you'd get an element like so:

$('#wrapper') - this is for the id of wrapper

but in the JS file we can do it like this:

document.querySelector('#wrapper');

store it in a variable -but it's called a constant in js:

const wrap =document.querySelector('#wrapper');

*The following code will pull the class name of the 2nd child of the li list
in the booklist id.

const wmf =document.querySelector('#book-list li:nth-child(2) .name');
console.log(wmf);

*What if I want to grab every name in the li under booklist?

var books = document.querySelector('#book-list li .name');
console.log(books);   NO NO NO

THE ABOVE WONT WORK BECAUSE QUERYSELECTOR ONLY RETURNS ONE THING.
IT RETURNS THE FIRST ITEM IT FINDS AND STOPS.

QUERYSELECTORALL is what you want to get them all.  It returns a collection in square brackets:

var books = document.querySelectorAll('#book-list li .name');
console.log(books);

*To cycle through the collection of books and display each one:

Array.from(books).forEach(function(book){
    console.log(book);
})

LESSON 5 - CHANGING TXT & HTML CONTENT

***When you use the querySelectorAll method it will return a nodelist
you don't have to turn it into an array before running the foreach method
You can just use book.forEach for example

But when you use getElementsByClassName for example it returns an HTML
collection and you do have to turn it into an array before usin the forEach
method

var books = document.querySelectorAll('#book-list li .name');

Array.from(books).forEach(function(book){
    console.log(book.textContent);
})  

This will retun text content of each book:

app.js:21 Name of the Wind
app.js:21 The Wise Man's Fear
app.js:21 Kafka on the Shore
app.js:21 The Master and the Margarita

To change the text content:

Array.from(books).forEach(function(book){
    book.textContent = 'test';
})  //will show "test" for each book title on the webpage

To append the text content:

Array.from(books).forEach(function(book){
    book.textContent += ' test';
})  //+= appends

To update HTML on the page lets update it on the id book-list as you see below:

const bookList = document.querySelector('#book-list');
console.log(bookList.innerHTML);


To change the content of the innerHTML selected in the <h2> tag:

const bookList = document.querySelector('#book-list');
bookList.innerHTML = '<h2>Books and more books...<h2>'

And to append it:

const bookList = document.querySelector('#book-list');
bookList.innerHTML = '<h2>Books and more books...<h2>';
bookList.innerHTML += '<p>This is how you add HTML<p>'

LESSON 6 NODES

Every single thing on a webpage is a node.  there are many types of nodes

So to find out what type it is:

const banner = document.querySelector('#page-banner');

console.log('#page-banner node type is:', banner.nodeType);
    ** This will return #page-banner node type is: 1.  What does that mean?
        If you google Node types - Return Values you'll find a sheet that tells
        what each node type number is.  1 is an element! 
        
Let's output the node name:

const banner = document.querySelector('#page-banner');

console.log('#page-banner node name is:', banner.nodeName);
    * This will return that the node name is DIV so it tells you what element it is.
        
Let's find out if the node has a child:

console.log('#page-banner has child nodes:', banner.hasChildNodes());
    *This is a method so it will return either true or false.  The other two
    were properties.
    
To clone a node:

const clonedBanner = banner.cloneNode(true); //true gives us all the nested content including the children
console.log(clonedBanner);
    
LESSON 7  TRAVERSING THE DOM

const booklist = document.querySelector('#book-list'); //gets a reference to the booklist
console.log('the parent node is:', booklist.parentNode);
    *this 2nd line will return the parent of booklist which is wrapper

This does the same thing:
console.log('the parent element is:', booklist.parentElement);

This will grab the parent element of the parent element of the booklist:
console.log('the parent element is:', booklist.parentElement.parentElement);

This will get you all the booklist's element children:
console.log(booklist.children);

if you do the following it will also give the line breaks aka text nodes which you don't need:
console.log(booklist.childNodes);
    
LESSON 8 DOM TRAVERSAL SIBLING ELEMENTS

Sibling elements are elements that are on the same level or that have the same direct parent

This code will get the next sibling which is a line break or text node:
const bookList = document.querySelector('#book-list');
console.log('book-list next sibling is:', bookList.nextSibling);

To get the next sibling that is an element you'd do:
console.log('book-list next element sibling is:', bookList.nextElementSibling);

To get the previous element you'd just use previous:
console.log('book-list previous element sibling is:', bookList.previousElementSibling);
    *you can do the same for previous node
    
The following code will get the previous of booklist and go into the innerHTML of the p tag to append
a break and sentence after it.

bookList.previousElementSibling.querySelector('p').innerHTML +='<br/>Too cool for everyone else';


LESSON 9 EVENTS

Events are stuff that happen inside of the browser like keypress events, click events, 
and submit events, etc.  

We can react to events on a web page when they occur by adding 
event listeners to the different elements that we want to listen to events on

var h2 = document.querySelector('#book-list h2'); //this gets the h2 element in booklist
h2.addEventListener('click', function(event){ //first parameter is the event we're going to react to, second is a function which will be what happens when the event happens on a page
    console.log(event.target); // target will tell us which element was clicked
    console.log(event); //just here so we can browse through it.
});

Let add even listeners to the delete buttons:

First step is to query the dom for all delete buttons

var btn = document.querySelectorAll('#book-list .delete');

Array.from(btn).forEach(function(btn){
    btn.addEventListener('click', function(event){
        
        const li = event.target.parentElement; //this will grab the parent element of the delete button which is li
        
        li.parentNode.removeChild(li);  //from the parentNode of Li which is UL I want to remove a child.  that child is li.  
    });
});

THE PREVENT DEFAULT METHOD-

If you have an anchor tag and you click on it it will take you somewhere.
If we want to prevent it then the prevent default method will work.

const link = document.querySelector('#page-banner a');  //this will grab the a tag in page banner
link.addEventListener('click', function(event){  //this is listening to the event on it
    event.preventDefault();  //this will prevent the default action from occurring
    console.log('navigation to',event.target.textContent, 'was prevented');
})


LESSON 10 EVENT BUBBLING

Event bubbling is the bubbling of event up through the DOM tree
Whenever we have an event listener and you click say an li element,
then the it fires it up and it bubbles up to it's direct parent element.
If the parent element has a function as well it will run that and run on to the next parent element
and if that has a function it'll run it too until it gets to the main parent element of that section.

In the last lesson, we shouldn't have really added an event listener to
each delete button (li)...because if we add another item on, it have the event listener on it.
Imagine if there are a bunch of buttons that you have to keep giving event listeners to.
The best thing is to add an event listener to the direct parent element of the li which is the ul

const list = document.querySelector('#book-list ul');
list.addEventListener('click', function(event){
    if (event.target.className == 'delete') {
        const li = event.target.parentElement;
        li.parentNode.removeChild(li); //or list.parentNode.removeChild(li);
    }
})

LESSON 11 INTERACTING WITH FORMS

On the inspect element of a web page you can access the forms by doing:

document.forms

YOu can use square bracket notation to target a certain one too:

document.forms[0]  

Or pass in the id of the forms

document.forms['add-book']

//add book-list
const addForm = document.forms['add-book'];
addForm.addEventListener('submit', function(event){
   event.preventDefault(); //prevents the click event from happenin for now
   const value = addForm.querySelector('input[Type = "text"]').value; //this will grab the users input and store in const
   console.log(value);
   
});

LESSON 12 CREATING ELEMENTS AND PLACING INTO THE DOM

In order to add the input on our booklist to add a book:

 //create element
 const li = document.createElement('li');
 const bookName = document.createElement('span');
 const deleteBtn = document.createElement('span');
 
 //add content
 deleteBtn.textContent = 'delete';
 bookName.textContent = value;
 
 
 //append to document
 li.appendChild(bookName);
 li.appendChild(deleteBtn);
 list.appendChild(li);
});

This code above will add the input but the delete button is not styled yet.

LESSON 13 STYLES AND CLASSES

We're trying to style the delete button.  In console, to look at the last delete button
which is the input from the user with the delete next to it, write the following to store it:

var li = document.querySelector('li:last-child')
var li will then pull that element.

then in the console to change the style of that li:

li.style.color = "red"  // changes the text to red

Let's add a margin in the console:

li.style.margin-top <--This won't work because javascriptwill see the dash as a minus sign.  Instead you have to use:
li.style.marginTop = "60px"

To get an elements class name in the console do:

li.className

If it doesn't have on you can assign one:

li.className = "text"

The code below appended to the JS file will work to style the button according to what your css file has:

bookName.classList.add('name'); //bookname is a const for the new bookname entered by the user
deleteBtn.classList.add('delete'); //deleteBtn is a const for delete button style

LESSON 14 CHANGING ATTRIBUTES

in the console we're going to grab the name of the first book in the unordered list with a class of name:

var book = document.querySelector('li:first-child .name')

to get an attribute of that book, on the console write:

book.getAttribute('class')
"name" //this is what it returns because books class attribute is name

So if you want to change the name of the book which is Name of the Wind to Name Two:

book.setAttribute('class', 'name-2')  //first argument picks the class attribute, second argument is what you want to change it to.

to check if something has a certain attribute on the console:

book.hasAttribute('class')  //this will check if there is an attribute of class

to remove an attribute:

book.removeAttribute('class')

LESSON 15 CHECKBOXES AND CHANGE EVENTS

In our html file under the form, we add a checkbox with additional styling in css:
<form id="add-book">
	    	<input type ="checkbox" id="hide"/> //this was added
	    	<label for="hide">Hide all books</label> //this was added
	    	<input type="text" placeholder="Add a book..." />
	    	<button>Add</button>
	    </form>
	   
Now we want to make the books hide with a once we check the box.  In the JS File:

const hideBox = document.querySelector('#hide');
hideBox.addEventListener('change',function(event){ //notice for a checkbox, it's a change event, not a click
if(hideBox.checked){
    list.style.display = "none";
} else {
    list.style.display = "initial";
}
    

});

