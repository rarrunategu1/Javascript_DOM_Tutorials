What is the DOM?

The DOM (Document Object Model) is created by the browser whenever
a web page loads.  It looks like a tree of elements to include 
parent and child elments.

This model allows us to interact with web pages in javascript 
to make changes to it.

We can make read and make changes to HTML elements, Css styles, 
href, src, alt and custom attributes.

We can even create new html elements and insert into the DOM.

Also we can attach event listeners to elements such as
click, keypress, submit and react to those with javascript.

GET ELEMENT BY ID

First step to get an element ID is to reach into the webpage
by typing "document" in the console when inspecting a webpage 
(without the quotes of course) and it will display the document 
code, line by line. 

To get it an element by id you would do the following
in the console next:
document.getElementById('page-banner') //page-banner is an id on this page.

I can store that element in a variable like so:
var banner = document.getElementById('page-banner')

GET ELEMENT BY CLASS NAME AND TAG

This one is almost the same as the id one.  

document.getElementsByClassName('title')

Give it a variable

var titles = document.getElementsByClassName('title')

*Since title is a class there will be multiple.  You can access each one like so:

titles[0]

BY TAG NAME

var lis = document.getElementsByTagName('li')
undefined
lis
HTMLCollection(4) [li, li, li, li]0: li1: li2: li3: lilength: 4__proto__: HTMLCollection

You can also access the individual elements as you do with class:

lis[0]


What if I want to query the DOM for all the 
title class elements and style them in a particular way:

for (i =0; i<titles.length; i++) {
    console.log(titles[i])
}
Will give you every title below:
VM194:2 <h1 data-cloud9-id=​"11" class=​"title">​Bookorama​</h1>​
VM194:2 <h2 data-cloud9-id=​"16" class=​"title">​Books to Read​</h2>​

     or you can cycle through it through a js file
     linked to your html
     
If you try this it won't work because titles isn't an array
forEach is only for arrays

var titles = document.getElementsByClassName('title');

titles.forEach(function(item){
    console.log(item);
})

Let's check if it's an array:
var titles = document.getElementsByClassName('title');

console.log(Array.isArray(titles));
*This will return false because it's not an array

So let's turn it into an array:

var titles = document.getElementsByClassName('titles');

console.log(Array.isArray(titles));
console.log(Array.isArray(Array.from(titles)));  //this line turns it into array, now returning true

So now I can change the initial code to read:

var titles = document.getElementsByClassName('title');

Array.from(titles).forEach(function(item){
console.log(item);
})

Now it will console.log every title


JAVASCRIPT QUERY SELECTOR

In jquery you'd get an element like so:

$('#wrapper') - this is for the id of wrapper

but in the JS file we can do it like this:

document.querySelector('#wrapper');

store it in a variable -but it's called a constant in js:

const wrap =document.querySelector('#wrapper');

*The following code will pull the class name of the 2nd child of the li list
in the booklist id.

const wmf =document.querySelector('#book-list li:nth-child(2) .name');
console.log(wmf);

*What if I want to grab every name in the li under booklist?

var books = document.querySelector('#book-list li .name');
console.log(books);   NO NO NO

THE ABOVE WONT WORK BECAUSE QUERYSELECTOR ONLY RETURNS ONE THING.
IT RETURNS THE FIRST ITEM IT FINDS AND STOPS.

QUERYSELECTORALL is what you want to get them all.  It returns a collection in square brackets:

var books = document.querySelectorAll('#book-list li .name');
console.log(books);

*To cycle through the collection of books and display each one:

Array.from(books).forEach(function(book){
    console.log(book);
})
